See doc/README.txt


The dependency graphs capture parent vs. child packages in Ada
* Ada package names may have dot in between, naturally split the name to parent child package name portion
* in dot graph: ltail vs. lhead means the source vs sink of edged is for a subgraph the node belongs to.  
   * It means the entire subgraph (parent package) is source of sink, instead of a child node (child package) within the subgraph 
   * still the individual node is used to indicate the edge. This can be confusing. 

In the example below, 
* it really means cluster_1 --> cluster_2
* but node_1 -> node_2 is used instead, annotated with [ltail=cluster_1, lhead=cluster_2] 


The ltail and lhead attributes are required because DOT's compound graph syntax does not support direct cluster-to-cluster edges . 
In DOT format, edges can only connect individual nodes, not subgraphs/clusters directly 

````
digraph G {  
    compound=true;  
      
    subgraph cluster_1 {  
        label="parent_a";  
        node_1[label="child_a"];  
    }  
      
    subgraph cluster_2 {  
        label="parent_b";   
        node_2[label="child_b"];  
    }  
      
    node_1 -> node_2 [ltail=cluster_1, lhead=cluster_2];  
}
```

DePlo's Find_Leaf function selects specific node when multiple nodes exist within a cluster for cluster-to-cluster edge representation.

DePlo uses a deterministic selection strategy with a clear preference order when choosing which leaf node to use for cluster edges output.adb:187-208 .

Selection Algorithm
* The Find_Leaf function follows this priority order:
* Direct children first: It searches through all direct children of the cluster and returns the first leaf node found among them output.adb:197-202
* Recursive fallback: If no direct children are leaf nodes, it recursively calls Find_Leaf on the first child in the children array output.adb:204-205
